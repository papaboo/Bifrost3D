BACKLOG:
* Screenshot
 * DX renderer including margin for SSAO?
 * OptiX renderer not getting screenshot call
 * Update readme and reference images.
* Vertex color support
* Rough glass
 * Glass sphere in test scene should have a strong specular highlight from the area light
 * Can we use Bounded VNDF when the IOR is greater (or was it less) than 1.0? So cases where the refraction will cause more of the lobe to be occluded.
 * Energy preserving transmission. 16^3 8bit texture?
  * cos_theta, roughness, and relative IOR dependent.
  * Implement TransmissiveShading::Rho
 * Define how we should scale roughness of a surface underneath another rough surface.
  * Fixed coat roughness, binary search of underlying roughness that matches GGX * GGX
 * Handle thin walled transmissive material
  * Test!!
  * What about total internal reflection on smooth thinwalled surfaces? Isn't that basically just an energy dump as the angle between the normal and wo never changes?
  * Thin walled materials should not refract, effectively only tinting the transmission by the base color.
  * Does that amount to just squaring alpha, squaring tint, and disabling refraction / IOR of 1?
  * Thinwalled transmissive smooth materials can tint the anyhit. But remember to take the previous BSDF PDF into account
  * Should support cutout (Kalestra as glass)
 * How can we ensure that refractions handle bidirectional renderers? PBRT does it by tracing 'importance' or radiance. I think I'd prefer to just differentiate on samping wo or wi.
  * The current implementation samples wi from wo, but internally it acts as if wo is wi. See both the reflectance scaling and refract(...) expects the incident light direction.
  * See PBRT section 16.1. Apparently light rays need to be scaled, but not view rays.
 * Add support for local refraction in the coat in default shading
 * Approximate rough glass in DX11 using a gaussian filter, see Doom 2016.
  * Possibly expand with OIT using moments, as transparency is a PITA https://momentsingraphics.de/MissingTMBOITCode.html
 * Support for absorption / Beers law. Add case to transmission test scene. Whisky in glass? (Cylinder inside glass)
  * Suppport for nested layers? Add (ice) cubes to the whisky. Make a tesselated box, bevel the edges and randomly offset the side vertices. Add air bubble inside the ice cubes.
  * See Yi's post on nested dielectrics and ordering
* Improving shadow terminator
 * Reflections: Hacking the shadow terminator https://jo.dreggn.org/home/2021_terminator.pdf
 * Refractions: Taming the shadow terminator https://www.yiningkarlli.com/projects/shadowterminator.html
* Integrate rough glass into DefaultShading
 * See how gltf distinguishes between opacity, cutout and refracting. They should be orthogonal, as you can still have refracting perforated microgeometry.
  * Cutout implies thinwalled and opacity is subpixel cutout, so does opacity < 1 imply thinwalled as well? Otherwise definining the medium that the light moves through gets 'tricky'
* Bugs
 * SimpleViewer test scene - There seems to be a sampler bug. The blue torus has a ghost highlight from the blinking light and if the blinking light is on, then the copper sphere has a discontinuity in shading bases on position. It's not the RNG. Has been tested with LCG
 * SimpleViewer can't switch between rasterizer and ray tracer using P after alt tabbing. Windows input seems to be recorded correctly, but the keyboard state is wrong. Perhaps a clear/reinitialize is in order?
 * Simpleviewers picture in picture's height/depth ratio doesn't update when the viewport updates
 * Test scene area light reflection in floor has artifacts.
 * Environment map has different intensities in DX and OptiX. See --environment-map "C:\Users\Asger Hoedt\Development\data\textures\spheremaps\3DTotal_free_sample_1_Bg.jpg"
 * DX11 crash when box gun shot destroyed
* Bump mapping
 * Create test scene with a plane where one side has proper micro geometry and the other is normal mapped.
 * Use Microfacet-based Normal Mapping for Robust Monte Carlo Path Tracing to solve the energy preservation issue.
 * Or simply negate the part of the shading hemisphere that disagrees with the geometric normal to make a complete hemisphere.
  * That should preserve abs(cos(theta)) as well, so not affect variance adversely
* Emissive meshes
 * Mirror glTF for starters. Emissive texture and emissive 'strength'
  * https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_emissive_strength/README.md
 * Do something similar to or reuse the fixed light samples in PresampledEnvironmentLight and add MIS
  * Presample mesh lights. Handle textures by random sampling and then do reestimated importance sampling when combining samples. Cheapest memory wise, parallelisable, and a pretty simple solution.
 * Efficient triangle sampling
  * https://gpuopen.com/download/publications/Hierarchical_Light_Sampling_with_Accurate_Spherical_Gaussian_Lighting.pdf
  * https://dl.acm.org/doi/10.1145/3665320.3670993
* Remove color banding
 * http://www.loopit.dk/banding_in_games.pdf and https://www.shadertoy.com/view/4t2SDh
* Threadsafe asset management
 * Assets shouldn't be copied on resize/reserve, as that gives issues when multithreading asset creation.
  * Instead we can allocate the assets in chunks and just allocate more chunks as needed. Linked list style
  * To avoid dereferencing multiple pointers whenever an asset's property is accessed, we can just return the (now static) reference to the asset. So instead of having Images::get_size, we'll instead use Images::get(image_ID) to return an image and then call get_size on that.
 * Allow multithreaded UID generation
 * Use the threadsafe asset management in model loaders to parallelize asset loading and creation.
* Dithered transparency in the material
 * using a fairly large blue noise texture, morton encoding or Laine-Karras hash
 * Consider it an engine effect and include it in the path tracer as well
 * See https://www.youtube.com/watch?v=NHd1PeJfyzE
* Upgrade OptiX to get better denoiser
 * sea_keep_lonely_watcher shows bright artifacts on transparent geometry. They seem to come from the anyhit programs not always intersecting all geometry, but stopping after the first nearest intersections.
 * Implement statistical denoiser as https://dl.acm.org/doi/pdf/10.1145/3680528.3687591
* ReSTIR
 * Start with the simpler Spatiotemporal variance-guided filtering: real-time reconstruction for path-traced global illumination
 * Generalized Resampled Importance Sampling
 * Change the rng seed to be based on a frame count instead of an accumulation count
  * How will that affect non-ReSTIR
* Decima Engine Area lights
 * https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Shaders/Private/BRDF.ush
 * https://www.guerrilla-games.com/read/decima-engine-advances-in-lighting-and-aa
* Blue noise seed
 * PBRTs random morton code seed looks pretty simple (and I do love a good morton code)
  * Make ZSobolSampler 'progressive' with fixed 256 sample offset in between the pixels.
 * Heitz and Georgiev blue noise screen space seed scheme.
* SDF shadows - check UE4
 * http://kunzhou.net/2013/fur-rendering-tvcg.pdf
 * RTSDF: Real-time Signed Distance Fields for Soft Shadow Approximation in Games
 * Call of duty precomputed GI. Check how they handle light bleeding. http://advances.realtimerendering.com/s2017/Precomputed%20Lighting%20in%20CoD%20IW_20_PPS.pdf
* SSAO
 * Compute SSAO based on geometric/screenspace normals and filter based on shading normals.
  * That way we avoid issues with the SSAO hemisphere selfshadowing (think spherical cube), but we still filter across hard boundaries if they are defined as smooth.
 * Intensity should be relative to sample distance, not absolute distance intensity.
  * When hitting the screen space max radius then results should be independent of the world radius. Are they? Test scene with three 'infinite' walls.
* Iridescent clear coat.
 * https://hal.archives-ouvertes.fr/hal-01518344/document and https://www.youtube.com/watch?v=4nKb9hRYbPA
 * Or just add a GGX layer on top with an iridescence parameter (red and blue fresnel offset relative to green. [Specularity, iridescence)

libs
* ReactPhysics or BulletPhyssics (or both)
* RtAudio wrapper - https://github.com/thestk/rtaudio
* LuaJit - OpenSource (Fallback to interpretted Lua if the target architecture isn't supported.)
* ply loader https://github.com/mhalber/msh
* CPU BVH https://github.com/jbikker/tinybvh
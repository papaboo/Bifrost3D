BACKLOG:
* Dump multi scattering contribution in specular lobe instead of diffuse.
** OptiX: Could make it simpler to make the coat a separate interface instead of build into the default material.
*** Refactor to dump MS in SS
*** Split shading models
** DX: Move area light abstractions out into util functions?
*** Remove world to shading as parameter?
*** Improve documentation.
**** Why is AO scaled?
**** What's that nearly diffuse or mirror special case in GGX? And why does it ignore AO?
**** Why does the nearly mirror specular rings in TestScene have (strong) AO?
**** Can we reduce the amount of computations done inside the branches?
*** Can we take the coming split into account? Is there any shared GGX/lambert area light code?
*** There are some shared variables; light center, radiance, ambient visibility, that'll have to be precomputed in then passed to the actual BSDF implementations.
*** We can have a shading model wrapper, that handles these precomputations and dispatches to the different light modes
** Define how we should scale roughness of a surface underneath another rough surface
** Add support for local refraction in the GGX BSDF??
* Normals revisited
** Implement Solving Self-Intersection Artifacts in DirectX Raytracing in OptiX, to avoid hard shadows on tesselated spheres.
*** https://developer.nvidia.com/blog/solving-self-intersection-artifacts-in-directx-raytracing/
*** Will probably require an origin per new ray, so one for light samples and one for BSDF samples
** Cubical sphere's in sphere scene are partially see-through near the border.
*** Toggling thin-walled has a pretty drastic effect even though all intersections should be on the outside
** Can we remove scene epsilon then?
* Rough glass
** Test that PDF is always positive if reflectance is positive
*** Test for entire sphere, not just expected hemisphere.
** Change integrators such that shading normal doesn't always point towards the camera and can be used to differentiate between front and backside intersections in GGX.
*** Or keep the normal as is and 'flip' the index of refraction
** Add rough glass shading model
*** Rough glass sheet test scene.
** Can we use Bounded VNDF when the IOR is greater (or was it less) than 1.0? So cases where the refraction will cause more of the lobe to be occluded.
** Allow ior of 1, which is effectively tinting the transmission.
*** See PBRTv4 bxdfs.cpp line 80: if (eta == 1 || mfDistrib.EffectivelySmooth()) { .. }
*** What is 'EffectivelySmooth' defined as?
*** PBRT handles it as a delta dirac, which I'd still like to avoid
** Approximate rough glass in DX11 using a guassian filter, see Doom 2016.
* Emissive meshes
** Mirror glTF for starters. Emissive texture and emissive 'strength'
*** https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_emissive_strength/README.md
** Do something similar to or reuse the fixed light samples in PresampledEnvironmentLight and add MIS
* Dithered transparency in the material
** using a fairly large blue noise texture, morton encoding or Laine-Karras hash
** Consider it an engine effect and include it in the path tracer as well
** See https://www.youtube.com/watch?v=NHd1PeJfyzE
* Bump mapping
** Taming the Shadow Terminator for 'proper' handling of hemisphere distortion. Only scales the contribution. Mirror surfaces still have to be handled differently
*** https://blog.yiningkarlli.com/2020/02/shadow-terminator-in-takua.html
** Approach it the same way that Heitz did with multiple bounces.
** Or simply flip the normal or correct back facing, similar to the original shading normal.
* Film grain
** http://www.loopit.dk/banding_in_games.pdf
** https://www.shadertoy.com/view/4t2SDh
* Threadsafe asset management
** Assets shouldn't be copied on resize/reserve, as that gives issues when multithreading asset creation.
*** Instead we can allocate the assets in chunks and just allocate more chunks as needed. Linked list style
*** To avoid dereferencing multiple pointers whenever an asset's property is accessed, we can just return the (now static) reference to the asset. So instead of having Images::get_size, we'll instead use Images::get(image_ID) to return an image and then call get_size on that.
** Allow multithreaded UID generation
** Use the threadsafe asset management in model loaders to parallelize asset loading and creation.
* Upgrade OptiX to get better denoiser
* ReSTIR
** Start with the simpler Spatiotemporal variance-guided filtering: real-time reconstruction for path-traced global illumination
** Generalized Resampled Importance Sampling
** Change the rng seed to be based on a frame count instead of an accumulation count
*** How will that affect non-ReSTIR
* Decima Engine Area lights
** https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Shaders/Private/BRDF.ush
** https://www.guerrilla-games.com/read/decima-engine-advances-in-lighting-and-aa
* Blue noise seed
** PBRTs random morton code seed looks pretty simple (and I do love a good morton code)
*** Make ZSobolSampler 'progressive' with fixed 256 sample offset in between the pixels.
** Heitz and Georgiev blue noise screen space seed scheme.
* SDF shadows - check UE4
** http://kunzhou.net/2013/fur-rendering-tvcg.pdf
** Call of duty precomputed GI. Check how they handle light bleeding. http://advances.realtimerendering.com/s2017/Precomputed%20Lighting%20in%20CoD%20IW_20_PPS.pdf
* SSAO
** Compute SSAO based on geometric/screenspace normals and filter based on shading normals.
*** That way we avoid issues with the SSAO hemisphere selfshadowing (think spherical cube), but we still filter across hard boundaries if they are defined as smooth.
** Intensity should be relative to sample distance, not absolute distance intensity.
*** When hitting the screen space max radius then results should be independent of the world radius. Are they? Test scene with three 'infinite' walls.
** Try seeding with hilbert curve + hash from 'Stratified sampling for stochastic transparency'
* SSBN
** Bent normal
*** Path tracer backend (Also one for SSAO?)
*** For diffuse env map lookup.
*** For cones compute aparture from visibility
*** Intersect bent cone with light cone or distribution and bake into 3D LUT (GTSO)
* Iridescent clear coat.
** https://hal.archives-ouvertes.fr/hal-01518344/document and https://www.youtube.com/watch?v=4nKb9hRYbPA
** Or just add a GGX layer on top with an iridescence parameter (red and blue fresnel offset relative to green. [Specularity, iridescence)

libs
* ReactPhysics or BulletPhyssics (or both)
* RtAudio wrapper - https://github.com/thestk/rtaudio
* LuaJit - OpenSource (Fallback to interpretted Lua if the target architecture isn't supported.)
* ply loader https://github.com/mhalber/msh
// Bifrost Unique ID Generator.
// -----------------------------------------------------------------------------
// Copyright (C) 2015, Bifrost. See AUTHORS.txt for authors
//
// This program is open source and distributed under the New BSD License. See
// LICENSE.txt for more detail.
// -----------------------------------------------------------------------------

#include <assert.h>

namespace Bifrost {
namespace Core {

template <typename T>
TypedUIDGenerator<T>::TypedUIDGenerator(unsigned int start_capacity) 
    : m_capacity(start_capacity < 2 ? 2 : start_capacity)
    , m_IDs(new UID[m_capacity]), m_next_index(1u), m_last_index(m_capacity - 1) {
    m_IDs[0] = UID(1,1); // The invalid ID is at 0, so the 0'th index needs to point to something else for has() to return false;
    for (unsigned int i = 1; i < m_capacity; ++i)
        m_IDs[i] = UID(i + 1, 0);
}

template <typename T>
TypedUIDGenerator<T>::TypedUIDGenerator(TypedUIDGenerator<T>&& other)
    : m_capacity(other.m_capacity), m_IDs(other.m_IDs), m_next_index(other.m_next_index), m_last_index(other.m_last_index) {
    other.m_IDs = nullptr;
    other.m_capacity = other.m_next_index = other.m_last_index = 0;
}

template <typename T>
TypedUIDGenerator<T>::~TypedUIDGenerator() {
    if (m_IDs)
        delete[] m_IDs;
}

template <typename T>
TypedUIDGenerator<T>& TypedUIDGenerator<T>::operator=(TypedUIDGenerator<T>&& rhs) {
    m_capacity = rhs.m_capacity;
    m_IDs = rhs.m_IDs;
    m_next_index = rhs.m_next_index;
    m_last_index = rhs.m_last_index;
    rhs.m_IDs = nullptr;
    rhs.m_capacity = rhs.m_next_index = rhs.m_last_index = 0;
    return *this;
}

inline unsigned int min(unsigned int lhs, unsigned int rhs) {
    return lhs < rhs ? lhs : rhs;
}

template <typename T>
typename TypedUIDGenerator<T>::UID TypedUIDGenerator<T>::generate() {
    if (m_next_index == m_last_index)
        reserve(m_capacity + m_capacity / 2);

    unsigned int index = m_next_index;
    UID& id = m_IDs[index];
    m_next_index = id.get_index();
    id.set_index(index);

    return id;
}

template <typename T>
bool TypedUIDGenerator<T>::erase(UID id) {
    if (has(id)) {
        m_IDs[m_last_index].set_index(id.get_index());
        m_last_index = id.get_index();

        // Invalidate the old ID
        m_IDs[id].increment_incarnation();
        m_IDs[id].set_index(0);

        return true;
    }

    return false;
}

template <typename T>
bool TypedUIDGenerator<T>::has(UID id) const {
    // If the ID equals it's own ID it is in use.
    return id.get_index() < m_capacity && m_IDs[id.get_index()] == id;
}

template <typename T>
void TypedUIDGenerator<T>::reserve(unsigned int new_capacity) {
    new_capacity = min(new_capacity, UID::MAX_IDS);
    if (new_capacity <= m_capacity)
        return;

    // Resize the array of IDs.
    UID* newIDs = new UID[new_capacity];
    memcpy(newIDs, m_IDs, sizeof(UID) * m_capacity);
    delete[] m_IDs;
    m_IDs = newIDs;
    
    // Rewire the pointers to the next free ID.
    m_IDs[m_next_index].set_index(m_capacity);
    for (unsigned int i = m_capacity; i < new_capacity; ++i)
        m_IDs[i] = UID(i + 1, 0u);

    m_capacity = new_capacity;
    m_last_index = m_capacity - 1;
}

/* Debug! 
template <typename T>
std::string TypedUIDGenerator<T>::to_string() {
    std::ostringstream out;
    for (unsigned int i = 0; i < m_capacity; ++i) {
        out << "[";
        if (i == m_next_index) out << "NEXT ";
        if (i == m_last_index) out << "LAST ";
        out << "id: " << m_IDs[i].get_index() << ", incarnation: " << m_IDs[i].get_incarnation_count() << "]";
        if (i + 1 < m_capacity)
            out << ", ";
    }
    return out.str();
}
*/

}
}
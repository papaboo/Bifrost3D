// Estimate the alpha of the GGX bounded VNDF distribution based on the maximal PDF when sampling the bounded VNDF
// and the angle between the view direction and the normal.
// ------------------------------------------------------------------------------------------------
// Copyright (C) 2018, Bifrost. See AUTHORS.txt for authors
//
// This program is open source and distributed under the New BSD License.
// See LICENSE.txt for more detail.
// ------------------------------------------------------------------------------------------------
// Generated by MaterialPrecomputations application.
// ------------------------------------------------------------------------------------------------

#include <Bifrost/Assets/Shading/Fittings.h>
#include <Bifrost/Math/Utils.h>

namespace Bifrost::Assets::Shading::Estimate_GGX_bounded_VNDF_alpha {

const int alpha_sample_count = 1024;
const int wo_dot_normal_sample_count = 32;
const int max_PDF_sample_count = 32;

const float alphas[] = {
    // wo_dot_normal 0
    1, 1, 1, 1, 1, 0.938871, 0.872031, 0.817157, 0.770569, 0.730002, 0.693962, 0.661414, 0.631612, 0.603997, 0.578137, 0.553687, 0.530368, 0.507939, 0.486191, 0.464935, 0.443985, 0.423161, 0.402268, 0.38109, 0.359363, 0.336749, 0.312773, 0.28672, 0.257359, 0.222205, 0.174377, 0.0054493, 
    // wo_dot_normal 0.0322581
    1, 1, 1, 1, 1, 0.937553, 0.869374, 0.813476, 0.766074, 0.724838, 0.688236, 0.655206, 0.624982, 0.596994, 0.5708, 0.546049, 0.522455, 0.499773, 0.477789, 0.456311, 0.435155, 0.414133, 0.393052, 0.371692, 0.349787, 0.326998, 0.302849, 0.276619, 0.247077, 0.211721, 0.163643, 0.00127846, 
    // wo_dot_normal 0.0645161
    1, 1, 1, 1, 1, 0.936134, 0.866522, 0.809538, 0.761278, 0.719341, 0.68215, 0.648617, 0.617956, 0.589583, 0.563045, 0.537984, 0.514106, 0.491165, 0.468939, 0.447236, 0.425866, 0.404644, 0.38337, 0.361824, 0.339738, 0.31677, 0.292445, 0.266032, 0.236302, 0.200743, 0.15245, 0.00119102, 
    // wo_dot_normal 0.0967742
    1, 1, 1, 1, 1, 0.93461, 0.863473, 0.805342, 0.756182, 0.713514, 0.675715, 0.641664, 0.610556, 0.581789, 0.554902, 0.529526, 0.505363, 0.48216, 0.459693, 0.437766, 0.416187, 0.394766, 0.373306, 0.35158, 0.329322, 0.306189, 0.281703, 0.255139, 0.225263, 0.189591, 0.141337, 0.0011042, 
    // wo_dot_normal 0.129032
    1, 1, 1, 1, 1, 0.932976, 0.860216, 0.800879, 0.75078, 0.707354, 0.668929, 0.634347, 0.602784, 0.57362, 0.546382, 0.520693, 0.496248, 0.472787, 0.450088, 0.427946, 0.406168, 0.384563, 0.362931, 0.341047, 0.318644, 0.295378, 0.270776, 0.244123, 0.214211, 0.178616, 0.130855, 0.0010223, 
    // wo_dot_normal 0.16129
    1, 1, 1, 1, 1, 0.931219, 0.856739, 0.796137, 0.745061, 0.700855, 0.661789, 0.626671, 0.59465, 0.56509, 0.537506, 0.511511, 0.486795, 0.463091, 0.440172, 0.417833, 0.395877, 0.374113, 0.35234, 0.330334, 0.307831, 0.284491, 0.259851, 0.233214, 0.203418, 0.168164, 0.121422, 0.000948611, 
    // wo_dot_normal 0.193548
    1, 1, 1, 1, 1, 0.929335, 0.853031, 0.791103, 0.739016, 0.694013, 0.654298, 0.618644, 0.586168, 0.556221, 0.528303, 0.502018, 0.477047, 0.45312, 0.430008, 0.4075, 0.385398, 0.363513, 0.341645, 0.319569, 0.297028, 0.273691, 0.249114, 0.222632, 0.193141, 0.158498, 0.113176, 0.000884185, 
    // wo_dot_normal 0.225806
    1, 1, 1, 1, 1, 0.927311, 0.849078, 0.785769, 0.732641, 0.686828, 0.646462, 0.610275, 0.577359, 0.54704, 0.518808, 0.492256, 0.467057, 0.44294, 0.419667, 0.397028, 0.374827, 0.35287, 0.330961, 0.308885, 0.286386, 0.263149, 0.23875, 0.21256, 0.183551, 0.149743, 0.106065, 0.000828632, 
    // wo_dot_normal 0.258065
    1, 1, 1, 1, 1, 0.925138, 0.844868, 0.780123, 0.725935, 0.679302, 0.638293, 0.601588, 0.568248, 0.537584, 0.509065, 0.482278, 0.456889, 0.432619, 0.40923, 0.38651, 0.364262, 0.342295, 0.320416, 0.298412, 0.276041, 0.253003, 0.228894, 0.203129, 0.174744, 0.141915, 0.0999574, 0.000780917, 
    // wo_dot_normal 0.290323
    1, 1, 1, 1, 1, 0.922806, 0.840387, 0.774159, 0.71889, 0.671445, 0.629805, 0.592604, 0.558872, 0.527894, 0.499125, 0.472145, 0.446609, 0.422237, 0.398785, 0.376039, 0.353806, 0.331896, 0.310117, 0.288267, 0.266109, 0.243362, 0.219641, 0.194397, 0.166737, 0.134955, 0.09468, 0.000739688, 
    // wo_dot_normal 0.322581
    1, 1, 1, 1, 1, 0.9203, 0.835622, 0.76787, 0.711516, 0.663268, 0.621022, 0.583358, 0.54927, 0.518019, 0.48905, 0.461924, 0.436296, 0.411875, 0.388418, 0.365709, 0.343555, 0.321769, 0.300162, 0.278537, 0.25667, 0.234289, 0.211032, 0.186382, 0.159495, 0.128772, 0.090095, 0.000351934, 
    // wo_dot_normal 0.354839
    1, 1, 1, 1, 1, 0.917606, 0.830562, 0.761252, 0.703813, 0.654787, 0.611972, 0.573886, 0.539489, 0.508018, 0.478899, 0.451686, 0.426021, 0.401611, 0.378211, 0.355603, 0.333592, 0.311992, 0.290623, 0.269288, 0.247773, 0.225817, 0.203075, 0.179054, 0.15296, 0.123267, 0.0860775, 0.00033624, 
    // wo_dot_normal 0.387097
    1, 1, 1, 1, 1, 0.914713, 0.825195, 0.754304, 0.695797, 0.646027, 0.602685, 0.564231, 0.529582, 0.497948, 0.468741, 0.441499, 0.415859, 0.391523, 0.368238, 0.345791, 0.323981, 0.302628, 0.28155, 0.260557, 0.23944, 0.217946, 0.195746, 0.172368, 0.147055, 0.118349, 0.0825318, 0.00032239, 
    // wo_dot_normal 0.419355
    1, 1, 1, 1, 1, 0.911606, 0.819513, 0.747029, 0.687483, 0.637016, 0.593207, 0.554444, 0.519604, 0.487872, 0.458638, 0.431431, 0.405877, 0.381673, 0.358563, 0.336328, 0.314773, 0.293711, 0.272967, 0.252351, 0.231662, 0.210653, 0.189004, 0.166267, 0.141709, 0.113932, 0.0793711, 0.000310043, 
    // wo_dot_normal 0.451613
    1, 1, 1, 1, 1, 0.908268, 0.813507, 0.739434, 0.678893, 0.627789, 0.583578, 0.544576, 0.509615, 0.47785, 0.448655, 0.421543, 0.396132, 0.372114, 0.349231, 0.327256, 0.305995, 0.285264, 0.264882, 0.244671, 0.224425, 0.203906, 0.182807, 0.16069, 0.136852, 0.109948, 0.0765422, 0.000298993, 
    // wo_dot_normal 0.483871
    1, 1, 1, 1, 1, 0.904684, 0.807175, 0.731536, 0.670057, 0.618388, 0.573851, 0.534682, 0.499671, 0.467942, 0.438847, 0.411888, 0.386676, 0.362892, 0.340274, 0.318598, 0.297662, 0.277286, 0.25729, 0.237491, 0.217694, 0.197666, 0.177103, 0.155584, 0.132426, 0.106331, 0.0739851, 0.000289004, 
    // wo_dot_normal 0.516129
    1, 1, 1, 1, 1, 0.900839, 0.800516, 0.723351, 0.661009, 0.608857, 0.564074, 0.524817, 0.489827, 0.458198, 0.429262, 0.40251, 0.377541, 0.354031, 0.331715, 0.310364, 0.289778, 0.269772, 0.250169, 0.23079, 0.211439, 0.191888, 0.171843, 0.150895, 0.128377, 0.103037, 0.0716615, 0.000279928, 
    // wo_dot_normal 0.548387
    1, 1, 1, 1, 1, 0.896721, 0.793535, 0.714906, 0.651786, 0.599244, 0.5543, 0.515034, 0.480133, 0.448665, 0.419943, 0.393443, 0.368754, 0.345551, 0.323561, 0.302556, 0.28233, 0.262703, 0.243497, 0.224533, 0.205619, 0.186531, 0.166983, 0.146574, 0.12466, 0.100021, 0.0695431, 0.000271653, 
    // wo_dot_normal 0.580645
    1, 1, 1, 1, 1, 0.892315, 0.786244, 0.706232, 0.642438, 0.589598, 0.544583, 0.505382, 0.470637, 0.439385, 0.410921, 0.384709, 0.360333, 0.337459, 0.315813, 0.295164, 0.275307, 0.25606, 0.237247, 0.21869, 0.2002, 0.181558, 0.162483, 0.142583, 0.121233, 0.097248, 0.0675999, 0.000264062, 
    // wo_dot_normal 0.612903
    1, 1, 1, 1, 1, 0.887611, 0.778664, 0.697368, 0.633009, 0.579974, 0.534971, 0.495906, 0.461374, 0.430386, 0.402217, 0.376324, 0.352281, 0.329753, 0.308462, 0.288174, 0.268688, 0.249816, 0.231389, 0.213227, 0.195147, 0.176931, 0.158304, 0.138885, 0.118064, 0.0946875, 0.0658085, 0.000257065, 
    // wo_dot_normal 0.645161
    1, 1, 1, 1, 1, 0.88261, 0.770819, 0.68836, 0.623554, 0.570421, 0.52551, 0.486646, 0.452378, 0.421692, 0.393848, 0.368295, 0.344602, 0.322429, 0.301497, 0.281571, 0.26245, 0.243948, 0.225895, 0.208115, 0.190425, 0.172615, 0.154415, 0.135449, 0.115124, 0.0923157, 0.0641488, 0.000250581, 
    // wo_dot_normal 0.677419
    1, 1, 1, 1, 1, 0.877312, 0.762748, 0.679262, 0.614124, 0.56099, 0.516244, 0.477635, 0.443672, 0.413319, 0.385823, 0.360625, 0.337289, 0.315474, 0.2949, 0.275333, 0.25657, 0.238428, 0.220736, 0.203324, 0.186009, 0.168584, 0.150785, 0.132248, 0.112389, 0.0901123, 0.0626122, 0.000244579, 
    // wo_dot_normal 0.709677
    1, 1, 1, 1, 1, 0.871731, 0.754501, 0.670127, 0.604777, 0.551726, 0.507208, 0.468902, 0.435278, 0.405278, 0.378146, 0.353309, 0.330335, 0.308877, 0.288656, 0.26944, 0.251025, 0.23323, 0.215886, 0.198826, 0.181868, 0.164808, 0.147391, 0.129255, 0.109834, 0.0880536, 0.0611764, 0.00023897, 
    // wo_dot_normal 0.741935
    1, 1, 1, 1, 1, 0.865892, 0.746131, 0.661022, 0.595565, 0.542677, 0.498439, 0.46047, 0.427207, 0.397578, 0.370814, 0.346342, 0.323726, 0.30262, 0.282747, 0.26387, 0.245793, 0.228333, 0.211323, 0.194598, 0.17798, 0.161267, 0.144209, 0.126454, 0.107444, 0.0861309, 0.0598354, 0.000233732, 
    // wo_dot_normal 0.774194
    1, 1, 1, 1, 1, 0.859844, 0.737722, 0.652016, 0.586549, 0.533882, 0.489967, 0.452359, 0.419471, 0.390217, 0.363823, 0.339714, 0.317452, 0.296691, 0.277153, 0.258607, 0.240853, 0.223714, 0.207024, 0.190618, 0.174321, 0.157938, 0.141221, 0.123822, 0.105201, 0.0843293, 0.0585786, 0.000228823, 
    // wo_dot_normal 0.806452
    1, 1, 1, 1, 1, 0.853662, 0.729357, 0.643185, 0.577787, 0.525389, 0.481821, 0.444587, 0.41208, 0.383202, 0.357173, 0.333419, 0.3115, 0.291073, 0.27186, 0.253631, 0.236188, 0.219355, 0.202968, 0.186865, 0.170874, 0.154803, 0.138407, 0.121347, 0.103092, 0.0826329, 0.0573977, 0.00022421, 
    // wo_dot_normal 0.83871
    1, 1, 1, 1, 1, 0.847458, 0.721159, 0.634625, 0.569348, 0.517244, 0.474033, 0.437176, 0.405044, 0.376533, 0.350861, 0.327449, 0.305862, 0.285755, 0.266852, 0.248926, 0.231778, 0.215237, 0.199138, 0.183324, 0.167624, 0.151846, 0.135755, 0.119015, 0.101106, 0.0810361, 0.056286, 0.000219867, 
    // wo_dot_normal 0.870968
    1, 1, 1, 1, 1, 0.841412, 0.713286, 0.626454, 0.561317, 0.509507, 0.466647, 0.430152, 0.398381, 0.37022, 0.344887, 0.321803, 0.30053, 0.280727, 0.262119, 0.244479, 0.227613, 0.211347, 0.195522, 0.179979, 0.164552, 0.149055, 0.13325, 0.116814, 0.0992281, 0.0795282, 0.0552362, 0.000215767, 
    // wo_dot_normal 0.903226
    1, 1, 1, 1, 1, 0.835808, 0.705981, 0.618849, 0.553823, 0.502273, 0.459725, 0.423562, 0.392123, 0.364287, 0.339268, 0.316487, 0.295508, 0.275988, 0.257656, 0.240285, 0.223681, 0.207675, 0.192106, 0.176819, 0.161652, 0.146416, 0.130883, 0.11473, 0.0974551, 0.0781027, 0.0542438, 0.00021189, 
    // wo_dot_normal 0.935484
    1, 1, 1, 1, 1, 0.831181, 0.699679, 0.612126, 0.547099, 0.495714, 0.453403, 0.417507, 0.386345, 0.35879, 0.334045, 0.311534, 0.290817, 0.271554, 0.253474, 0.236347, 0.219986, 0.20422, 0.188889, 0.173841, 0.158913, 0.143926, 0.128646, 0.112762, 0.0957758, 0.0767524, 0.0533013, 0.000208208, 
    // wo_dot_normal 0.967742
    1, 1, 1, 1, 1, 0.828796, 0.695446, 0.607096, 0.541756, 0.490299, 0.448045, 0.412274, 0.381276, 0.353906, 0.329362, 0.307056, 0.286548, 0.267496, 0.249625, 0.23271, 0.21656, 0.201004, 0.185887, 0.171054, 0.156346, 0.141582, 0.126539, 0.110903, 0.0941885, 0.0754733, 0.0524107, 0.000204729, 
    // wo_dot_normal 1
    1, 1, 1, 1, 1, 0.840183, 0.704309, 0.612541, 0.544661, 0.491426, 0.447932, 0.411292, 0.379687, 0.351892, 0.327056, 0.304559, 0.283933, 0.264821, 0.246936, 0.230041, 0.213941, 0.19846, 0.183439, 0.168722, 0.154148, 0.139536, 0.124664, 0.109224, 0.0927343, 0.0742853, 0.0515722, 0.000201454, 
};

float encode_PDF(float pdf) { return pdf / (1.0f + pdf); }
float decode_PDF(float encoded_PDF) { return encoded_PDF / (1.0f - encoded_PDF); }

float estimate_alpha(float wo_dot_normal, float max_PDF) {
    using namespace Bifrost::Math;

    float encoded_PDF = encode_PDF(max_PDF);

    int lower_wo_dot_normal_row = int(wo_dot_normal * (wo_dot_normal_sample_count - 1));
    int upper_wo_dot_normal_row = min(lower_wo_dot_normal_row + 1, wo_dot_normal_sample_count - 1);

    int lower_encoded_PDF_column = int(encoded_PDF * (max_PDF_sample_count - 1));
    int upper_encoded_PDF_column = min(lower_encoded_PDF_column + 1, max_PDF_sample_count - 1);
    float encoded_PDF_t = encoded_PDF * (max_PDF_sample_count - 1) - lower_encoded_PDF_column;

    // Interpolate by encoded PDF
    const float* lower_alpha_row = alphas + lower_wo_dot_normal_row * wo_dot_normal_sample_count;
    float lower_alpha = lerp(lower_alpha_row[lower_encoded_PDF_column], lower_alpha_row[upper_encoded_PDF_column], encoded_PDF_t);

    const float* upper_alpha_row = alphas + upper_wo_dot_normal_row * wo_dot_normal_sample_count;
    float upper_alpha = lerp(upper_alpha_row[lower_encoded_PDF_column], upper_alpha_row[upper_encoded_PDF_column], encoded_PDF_t);

    // Interpolate by wo_dot_normal
    float wo_dot_normal_t = wo_dot_normal * (wo_dot_normal_sample_count - 1) - lower_wo_dot_normal_row;
    return lerp(lower_alpha, upper_alpha, wo_dot_normal_t);
}

} // NS Bifrost::Assets::Shading::Estimate_GGX_bounded_VNDF_alpha
